{"version":3,"sources":["components/TranslationInput.js","components/TranslationList.js","App.js","serviceWorker.js","index.js"],"names":["TranslationInput","props","onSubmit","submitText","className","name","type","placeholder","onChange","editText","id","TranslationList","translationList","map","element","index","key","App","useState","text","translation","setTranslation","translate","originalText","Promise","resolve","reject","axios","method","url","headers","useQueryString","params","data","then","response","contents","translated","catch","error","useEffect","res","console","log","e","preventDefault","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iQA2BeA,G,MAzBU,SAACC,GACxB,OACE,0BAAMC,SAAUD,EAAME,YACpB,yBAAKC,UAAU,oBACb,2BACEC,KAAK,OACLC,KAAK,OACLF,UAAU,eACVG,YAAY,aACZC,SAAUP,EAAMQ,WAElB,yBAAKL,UAAU,sBACb,4BACEA,UAAU,4BACVE,KAAK,SACLI,GAAG,iBAHL,eCFKC,EAVS,SAACV,GACvB,OACE,6BACGA,EAAMW,gBAAgBC,KAAI,SAACC,EAASC,GACnC,OAAO,wBAAIC,IAAKD,GAAQD,Q,iBCgEjBG,MAhEf,WAAgB,IAAD,EACyBC,mBAAS,CAC7CC,KAAM,GACNP,gBAAiB,KAHN,mBACNQ,EADM,KACOC,EADP,KAqBPC,EAAY,SAACC,GACjB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAM,CACJC,OAAQ,OACRC,IAAK,0CACLC,QAAS,CACP,eAAgB,oCAChB,kBAAmB,wBACnB,iBACE,qDACFC,gBAAgB,GAElBC,OAAQ,CACNb,KAAMI,GAERU,KAAM,KAELC,MAAK,SAACC,GACLV,EAAQU,EAASF,KAAKG,SAASC,eAEhCC,OAAM,SAACC,GACNb,EAAOa,UASf,OAJAC,qBAAU,WACRlB,EAAU,kBAAkBY,MAAK,SAACO,GAAD,OAASC,QAAQC,IAAIF,QACrD,IAGD,yBAAKrC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,uBACb,kBAAC,EAAD,CAAkBD,WA7CP,SAACyC,GAClBA,EAAEC,iBAEFvB,EAAUF,EAAYD,MAAMe,MAAK,SAACO,GAChCpB,EAAe,2BACVD,GADS,IAEZR,gBAAgB,GAAD,mBAAMQ,EAAYR,iBAAlB,CAAmC6B,WAuCNhC,SAjDjC,SAACmC,GAChBvB,EAAe,2BAAKD,GAAN,kBAAoBwB,EAAEE,OAAOzC,KAAOuC,EAAEE,OAAOC,cAoDzD,kBAAC,EAAD,CAAiBnC,gBAAiBQ,EAAYR,oBCrDhCoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLG,QAAQH,MAAMA,EAAMwB,c","file":"static/js/main.e03e90da.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TranslationInput = (props) => {\n  return (\n    <form onSubmit={props.submitText}>\n      <div className=\"input-group mb-3\">\n        <input\n          name=\"text\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Enter Text\"\n          onChange={props.editText}\n        />\n        <div className=\"input-group-append\">\n          <button\n            className=\"btn btn-outline-secondary\"\n            type=\"button\"\n            id=\"button-addon2\"\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default TranslationInput;\n","import React from \"react\";\n\nconst TranslationList = (props) => {\n  return (\n    <div>\n      {props.translationList.map((element, index) => {\n        return <h1 key={index}>{element}</h1>;\n      })}\n    </div>\n  );\n};\n\nexport default TranslationList;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport TranslationInput from \"./components/TranslationInput\";\nimport TranslationList from \"./components/TranslationList\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [translation, setTranslation] = useState({\n    text: \"\",\n    translationList: [],\n  });\n\n  const editText = (e) => {\n    setTranslation({ ...translation, [e.target.name]: e.target.value });\n  };\n\n  const submitText = (e) => {\n    e.preventDefault();\n\n    translate(translation.text).then((res) => {\n      setTranslation({\n        ...translation,\n        translationList: [...translation.translationList, res],\n      });\n    });\n  };\n\n  const translate = (originalText) => {\n    return new Promise((resolve, reject) => {\n      axios({\n        method: \"POST\",\n        url: \"https://yodish.p.rapidapi.com/yoda.json\",\n        headers: {\n          \"content-type\": \"application/x-www-form-urlencoded\",\n          \"x-rapidapi-host\": \"yodish.p.rapidapi.com\",\n          \"x-rapidapi-key\":\n            \"b7436eb940msh7eda97d567495aap1562ccjsndf86c1bddee6\",\n          useQueryString: true,\n        },\n        params: {\n          text: originalText,\n        },\n        data: {},\n      })\n        .then((response) => {\n          resolve(response.data.contents.translated);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    });\n  };\n\n  useEffect(() => {\n    translate(\"this is a trap\").then((res) => console.log(res));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"jumbotron rounded-0\">\n          <TranslationInput submitText={submitText} editText={editText} />\n        </div>\n      </div>\n\n      <TranslationList translationList={translation.translationList} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}